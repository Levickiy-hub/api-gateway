import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';
import { logger } from './LoggerService.js';
import os from 'os';

const CERT_DIR = path.join(process.cwd(), 'infrastructure/config/cert/');

class TLSService {
    constructor() {
        this.tlsConfig = null;
        this.initConfig();
        this.watchUpdateConfig();
    }

    async getConfig() {
        if (!this.tlsConfig) {
            await this.initConfig();
        }
        return this.tlsConfig;
    }

    async initConfig() {
        try {
            logger.info('üîê –ò—â–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...');

            // üîç –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            const certFiles = await this.classifyCertificates();
              // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
              const [key, certContent, ca, dhparam] = await Promise.all([
                fs.readFile(certFiles.privkey),
                fs.readFile(certFiles.cert),
                certFiles.ca ? fs.readFile(certFiles.ca) : null,
                certFiles.dhparam ? fs.readFile(certFiles.dhparam) : null
            ]);

            this.tlsConfig = { key, cert: certContent, ca, dhparam };

            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            this.validateCertificate(certContent.toString());

            logger.info('‚úÖ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.');
        } catch (error) {
            console.log(error)
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
            this.tlsConfig = null;
        }
    }



    async classifyCertificates() {
        const files = await fs.readdir(CERT_DIR);
        const certFiles = { privkey: null, cert: null, ca: null, dhparam: null };

        for (const file of files) {
            if (!file.endsWith('.pem')) continue;

            const filePath = path.join(CERT_DIR, file);
            const content = await fs.readFile(filePath, 'utf-8');

            if (content.includes('PRIVATE KEY')) {
                certFiles.privkey = filePath;
            } else if (content.includes('CERTIFICATE') && !certFiles.cert) {
                certFiles.cert = filePath; // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            } else if (content.includes('CERTIFICATE') && certFiles.cert) {
                certFiles.ca = filePath; // CA-chain (–µ—Å–ª–∏ –µ—Å—Ç—å)
            } else if (content.includes('DH PARAMETERS')) {
                certFiles.dhparam = filePath; // Diffie-Hellman –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            }
        }

        return certFiles;
    }

    validateCertificate(certContent) {
        try {    
            const cert = new crypto.X509Certificate(certContent);
    
            const validFrom = new Date(cert.validFrom);
            const validTo = new Date(cert.validTo);
            const now = new Date();
    
            if (now > validTo) {
                throw new Error(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω! –ò—Å—Ç—ë–∫: ${validTo}`);
            }
            logger.info(`‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${validTo}`);
    
            // üìå –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            const expectedDomain = process.env.DOMAIN_NAME || os.hostname();
            const expectedDomains = cert.subjectAltName.split(', ').map(d => d.replace(/^DNS:/, ''));
    
            logger.info(`üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ: ${expectedDomains}`);

            if (!expectedDomains.includes(expectedDomain)) {
                throw new Error(`‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Ö–æ—Å—Ç—É! –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedDomains.join(', ')}, –ø–æ–ª—É—á–µ–Ω–æ: ${expectedDomain}`);
            }
            logger.info(`‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–º–µ–Ω—É: ${expectedDomain}`);
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error.message);
        }
    }

    watchUpdateConfig() {
        try {
            fs.watch(CERT_DIR, async (eventType, filename) => {
                if (filename && filename.match(/(privkey|cert|chain)-\d+\.pem/)) {
                    logger.info('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...');
                    await this.initConfig();
                }
            });
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è TLS-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
        }
    }
}
const tlsService = new TLSService();
export default tlsService;
